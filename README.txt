Пояснительная записка:

Получив задание, сначала подумал, что такие задачи решаются на основе обратной польской записи. Но потом заметил, что математическое выражение может быть представлено бинарным деревом, в каждом узле которого производится операция между значениями потомков, а в листьях хранятся их значения. Решил остановиться на этом варианте. Запутавшись в реализации, погуглил аналогичные решения, затем написал свое.

Каждый узел дерева представлен объектом класса, соответствующего операции, которая в нем производится. Для листьев предусмотрен аналогичный класс. Все эти классы реализуют интерфейс INode.

Метод создания узла дерева вызывается рекурсивно для создания потомков данного узла, пока выражение не будет исчерпано созданием всех листьев, хранящих числовые значения. 

Для поддержки новой операции нужно создать новый класс узла, реализующий интерфейс INode, а также внести изменения в код в классе Operations, предназначенном для управления информацией о поддерживаемых операциях и приоритетах между ними. Это самая минимальная степень необходимых для поддержки новой операции правок исходного кода, которую я смог организовать.



***
Задание:

В качестве тестового задания предлагаем написать на C# консольный калькулятор (можно с веб-интерфейсом), который принимает входную строку, содержащую математическое выражение (целые и десятично-дробные числа, знаки +, -, *, / и скобки) и выводит в консоль результат его вычисления. Задание предполагает самостоятельную реализацию парсинга и расчета математического выражения.
 

Главным критерием при оценке задания является использование при разработке TDD и принципов SOLID. Архитектура решения должна обеспечивать расширение списка поддерживаемых операций при минимальном и максимально безболезненном для существующей функциональности внесении изменений в исходный код. Код должен быть легко читаем и отформатирован в едином стиле, содержать минимальное число поясняющих комментариев.
 

Пример консольного ввода:

Введите выражение: 1+2-3

Результат: 0
